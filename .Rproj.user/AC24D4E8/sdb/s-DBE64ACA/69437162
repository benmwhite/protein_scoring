{
    "contents" : "setwd(\"~/Dropbox/School/Research/protein_scoring\")\nrequire(\"ggplot2\")\nrequire(\"dplyr\")\n\n####preliminary functions####\nrename_col <- function(data, oldname, newname) {\n  names(data)[names(data) == oldname] <- newname\n  return(data)\n}\n\napply_col <- function(data, colname, f, ...) {\n  data[[colname]] <- f(data[[colname]], ...)\n  return(data)\n}\n\n# Multiple plot function\n#\n# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)\n# - cols:   Number of columns in layout\n# - layout: A matrix specifying the layout. If present, 'cols' is ignored.\n#\n# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),\n# then plot 1 will go in the upper left, 2 will go in the upper right, and\n# 3 will go all the way across the bottom.\n#\nmultiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {\n  require(grid)\n  \n  # Make a list from the ... arguments and plotlist\n  plots <- c(list(...), plotlist)\n  \n  numPlots = length(plots)\n  \n  # If layout is NULL, then use 'cols' to determine layout\n  if (is.null(layout)) {\n    # Make the panel\n    # ncol: Number of columns of plots\n    # nrow: Number of rows needed, calculated from # of cols\n    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),\n                     ncol = cols, nrow = ceiling(numPlots/cols))\n  }\n  \n  if (numPlots==1) {\n    print(plots[[1]])\n    \n  } else {\n    # Set up the page\n    grid.newpage()\n    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))\n    \n    # Make each plot, in the correct location\n    for (i in 1:numPlots) {\n      # Get the i,j matrix positions of the regions that contain this subplot\n      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))\n      \n      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,\n                                      layout.pos.col = matchidx$col))\n    }\n  }\n}\n\n####Computing minkowski distances from 0####\n#takes data frame as input, returns data frame with dists as new column\n#also computes d_i^k - d_i, where d_i^k is the minkowski distance\n#from 0 if x_ik is zer0. takes data frame input and returns data frame\n#with results as a new columns.\n\ncompute_dist <- function(data, prey_col, count_col, p) {\n  #p is minkowski distance parameter, prey_col is \n  #name of prey column in data set, count_col is name of\n  #count column in data set\n  out <- tbl_df(data) %.%\n    rename_col(prey_col, \"Prey\") %.%\n    rename_col(count_col, \"Count\") %.%\n    group_by(Prey) %.% \n    mutate(D_i = sum(Count^p)^(1/p), \n          D_ik = (sum(Count^p) - Count^p)^(1/p)) %.%\n    ungroup()\n  out$D_ik[is.infinite(out$D_ik)] <- NA\n  out$D_ik[out$D_ik == 0] <- NA\n  return(out)\n}",
    "created" : 1401937146482.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1011714948",
    "id" : "69437162",
    "lastKnownWriteTime" : 1401935942,
    "path" : "~/Dropbox/School/Research/protein_scoring/mink_dist.R",
    "project_path" : "mink_dist.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}